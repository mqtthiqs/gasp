%
% SYNTAX
%
program     : type.
declaration : type.
binding     : type.
expression  : type.
typ         : type.
char	    : type.
identifier  : type.
int	    : type.

%% Program
%%---------
declprog  : declaration -> program.
joinprog  : program -> program -> program.
emptyprog : program.

%% Declaration
%%-------------
valdecl : binding -> expression -> declaration.

%% Binding
%%---------
bind : identifier -> typ -> binding.

%% Expression
%%------------
var  : identifier -> expression.
eint : int -> expression.

%% Type
%%------
tint : typ.

%% Literals
%%---------
quarante-deux : int.

%% Identifier
%%-----------
a b c d e f g h i j k l m n o p q r s t u v w x y z : char.
-  : char -> identifier -> identifier.
-* : identifier.

%
% Type system
%

tenv : type.
tc-expression  : tenv -> expression -> typ -> type.
tc-program     : tenv -> program -> tenv -> type.
tc-declaration : tenv -> declaration -> tenv -> type.

%% Typing environment
%%-------------------
emptyenv : tenv.
joinenv  : tenv -> tenv -> tenv.
bindval  : binding -> tenv -> tenv.

%% Judgments over typing environments
%%-----------------------------------
subenv : tenv -> tenv -> type.
subenv-evidence : {E1 : tenv } { E2 : tenv } subenv E1 E2.

%% Equivalence modulo associativity
%%---------------------------------
equiv : tenv -> program -> tenv -> program -> type.
equiv-evidence :
  { E1 : tenv } { P1 : program } { E2 : tenv } { P2 : program }
  equiv E1 P1 E2 P2.

%% Typing rules
%%-------------
tc-declprog :
  { E1 : tenv } { d : declaration } { E2 : tenv } { H : tc-declaration E1 d E2 }
  tc-program E1 (declprog d) E2.

tc-emptyprog :
  { E : tenv } 
  tc-program E emptyprog E.

tc-joinprog :
  { E : tenv } { E1 : tenv } { E' : tenv } { E2 : tenv }
  { P1 : program } { P2 : program }
  { H1 : tc-program E P1 E1 }
  { H2 : subenv E' (joinenv E E1) }
  { H3 : tc-program E' P2 E2 }
  tc-program E (joinprog P1 P2) (joinenv E1 E2).

tc-valdecl :
  { E : tenv } { x : identifier } { ty : typ } { e : expression } 
  { H : tc-expression E e ty } 
  tc-declaration E (valdecl (bind x ty) e) (bindval (bind x ty) E).

tc-eint :
  { E : tenv } { x : int } 
  tc-expression E (eint x) tint.

commit : tenv -> Commit.
